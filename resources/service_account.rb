# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

# Add our google/ lib
$LOAD_PATH.unshift ::File.expand_path('../libraries', ::File.dirname(__FILE__))

require 'chef/resource'
require 'google/hash_utils'
require 'google/iam/network/delete'
require 'google/iam/network/get'
require 'google/iam/network/post'
require 'google/iam/network/put'
require 'google/iam/property/string'

module Google
  module GIAM
    # A provider to manage Google Cloud IAM resources.
    class ServiceAccount < Chef::Resource
      resource_name :giam_service_account

      property :sa_label,
               String,
               coerce: ::Google::Iam::Property::String.coerce,
               name_property: true, desired_state: true
      property :project_id,
               String, coerce: ::Google::Iam::Property::String.coerce, desired_state: true
      property :unique_id,
               String, coerce: ::Google::Iam::Property::String.coerce, desired_state: true
      property :email, String, coerce: ::Google::Iam::Property::String.coerce, desired_state: true
      property :display_name,
               String, coerce: ::Google::Iam::Property::String.coerce, desired_state: true
      property :oauth2_client_id,
               String, coerce: ::Google::Iam::Property::String.coerce, desired_state: true

      property :credential, String, desired_state: false, required: true
      property :project, String, desired_state: false, required: true

      action :create do
        fetch = fetch_resource(@new_resource, self_link(@new_resource))
        if fetch.nil?
          converge_by "Creating giam_service_account[#{new_resource.name}]" do
            # TODO(nelsonjr): Show a list of variables to create
            # TODO(nelsonjr): Determine how to print green like update converge
            puts # making a newline until we find a better way TODO: find!
            compute_changes.each { |log| puts "    - #{log.strip}\n" }
            create_req = ::Google::Iam::Network::Post.new(
              collection(@new_resource), fetch_auth(@new_resource),
              'application/json', resource_to_request
            )
            return_if_object create_req.send
          end
        else
          @current_resource = @new_resource.clone
          @current_resource.sa_label = ::Google::Iam::Property::String.api_parse(fetch['name'])
          @current_resource.project_id =
            ::Google::Iam::Property::String.api_parse(fetch['projectId'])
          @current_resource.unique_id =
            ::Google::Iam::Property::String.api_parse(fetch['uniqueId'])
          @current_resource.email = ::Google::Iam::Property::String.api_parse(fetch['email'])
          @current_resource.display_name =
            ::Google::Iam::Property::String.api_parse(fetch['displayName'])
          @current_resource.oauth2_client_id =
            ::Google::Iam::Property::String.api_parse(fetch['oauth2ClientId'])

          update
        end
      end

      action :delete do
        fetch = fetch_resource(@new_resource, self_link(@new_resource))
        unless fetch.nil?
          converge_by "Deleting giam_service_account[#{new_resource.name}]" do
            delete_req = ::Google::Iam::Network::Delete.new(
              self_link(@new_resource), fetch_auth(@new_resource)
            )
            return_if_object delete_req.send
          end
        end
      end

      # TODO(nelsonjr): Add actions :manage and :modify

      def exports
        {
          name: sa_label
        }
      end

      private

      action_class do
        def resource_to_request
          request = {
            name: new_resource.sa_label,
            displayName: new_resource.display_name
          }.reject { |_, v| v.nil? }
          # Format request to conform with API endpoint
          request = encode_request(request)
          request.to_json
        end

        def update
          converge_if_changed do |_vars|
            # TODO(nelsonjr): Determine how to print indented like upd converge
            # TODO(nelsonjr): Check w/ Chef... can we print this in red?
            puts # making a newline until we find a better way TODO: find!
            compute_changes.each { |log| puts "    - #{log.strip}\n" }
            update_req =
              ::Google::Iam::Network::Put.new(self_link(@new_resource),
                                              fetch_auth(@new_resource),
                                              'application/json',
                                              resource_to_request)
            return_if_object update_req.send, ''
          end
        end

        def self.resource_to_hash(resource)
          {
            project: resource.project,
            name: resource.sa_label,
            project_id: resource.project_id,
            unique_id: resource.unique_id,
            email: resource.email,
            display_name: resource.display_name,
            oauth2_client_id: resource.oauth2_client_id
          }.reject { |_, v| v.nil? }
        end

        # Copied from Chef > Provider > #converge_if_changed
        def compute_changes
          properties = @new_resource.class.state_properties.map(&:name)
          properties = properties.map(&:to_sym)
          if current_resource
            compute_changes_for_existing_resource properties
          else
            compute_changes_for_new_resource properties
          end
        end

        # Collect the list of modified properties
        def compute_changes_for_existing_resource(properties)
          specified_properties = properties.select do |property|
            @new_resource.property_is_set?(property)
          end
          modified = specified_properties.reject do |p|
            @new_resource.send(p) == current_resource.send(p)
          end

          generate_pretty_green_text(modified)
        end

        def generate_pretty_green_text(modified)
          property_size = modified.map(&:size).max
          modified.map! do |p|
            properties_str = if @new_resource.sensitive
                               '(suppressed sensitive property)'
                             else
                               [
                                 @new_resource.send(p).inspect,
                                 "(was #{current_resource.send(p).inspect})"
                               ].join(' ')
                             end
            "  set #{p.to_s.ljust(property_size)} to #{properties_str}"
          end
        end

        # Write down any properties we are setting.
        def compute_changes_for_new_resource(properties)
          property_size = properties.map(&:size).max
          properties.map do |property|
            default = ' (default value)' \
              unless @new_resource.property_is_set?(property)
            next if @new_resource.send(property).nil?
            properties_str = if @new_resource.sensitive
                               '(suppressed sensitive property)'
                             else
                               @new_resource.send(property).inspect
                             end
            ["  set #{property.to_s.ljust(property_size)}",
             "to #{properties_str}#{default}"].join(' ')
          end.compact
        end

        def fetch_auth(resource)
          self.class.fetch_auth(resource)
        end

        def self.fetch_auth(resource)
          resource.resources("gauth_credential[#{resource.credential}]")
                  .authorization
        end

        def fetch_resource(resource, self_link)
          self.class.fetch_resource(resource, self_link)
        end

        def debug(message)
          Chef::Log.debug(message)
        end

        def self.collection(data)
          URI.join(
            'https://iam.googleapis.com/v1/',
            expand_variables(
              'projects/{{project}}/serviceAccounts',
              data
            )
          )
        end

        def collection(data)
          self.class.collection(data)
        end

        def self.self_link(data)
          URI.join(
            'https://iam.googleapis.com/v1/',
            expand_variables(
              'projects/{{project}}/serviceAccounts/{{name}}',
              data
            )
          )
        end

        def self_link(data)
          self.class.self_link(data)
        end

        def self.return_if_object(response, allow_not_found = false)
          raise "Bad response: #{response.body}" \
            if response.is_a?(Net::HTTPBadRequest)
          raise "Bad response: #{response}" \
            unless response.is_a?(Net::HTTPResponse)
          return if response.is_a?(Net::HTTPNotFound) && allow_not_found 
          return if response.is_a?(Net::HTTPNoContent)
          result = decode_response(response)
          raise_if_errors result, %w[error errors], 'message'
          raise "Bad response: #{response}" unless response.is_a?(Net::HTTPOK)
          result
        end

        def return_if_object(response, allow_not_found = false)
          self.class.return_if_object(response, allow_not_found)
        end

        def self.extract_variables(template)
          template.scan(/{{[^}]*}}/).map { |v| v.gsub(/{{([^}]*)}}/, '\1') }
                  .map(&:to_sym)
        end

        def self.expand_variables(template, var_data, extra_data = {})
          data = if var_data.class <= Hash
                   var_data.merge(extra_data)
                 else
                   resource_to_hash(var_data).merge(extra_data)
                 end
          extract_variables(template).each do |v|
            unless data.key?(v)
              raise "Missing variable :#{v} in #{data} on #{caller.join("\n")}}"
            end
            template.gsub!(/{{#{v}}}/, CGI.escape(data[v].to_s))
          end
          template
        end

        # Format the request to match the expected input by the API
        def self.encode_request(resource_request)
          account_id = resource_request[:name].split('@').first
          resource_request.delete(:name)
          {
            'accountId' => account_id,
            'serviceAccount' => resource_request
          }
        end

        def encode_request(resource_request)
          self.class.encode_request(resource_request)
        end

        # Format the response to match Puppet's expectations
        def self.decode_response(response)
          response = JSON.parse(response.body)
          return response unless response.key? 'name'
          response['name'] = response['name'].split('/').last
          response
        end

        def decode_response(response)
          self.class.decode_response(response)
        end

        def self.fetch_resource(resource, self_link)
          get_request = ::Google::Iam::Network::Get.new(
            self_link, fetch_auth(resource)
          )
          return_if_object get_request.send, true
        end

        def self.raise_if_errors(response, err_path, msg_field)
          errors = ::Google::HashUtils.navigate(response, err_path)
          raise_error(errors, msg_field) unless errors.nil?
        end

        def self.raise_error(errors, msg_field)
          raise IOError, ['Operation failed:',
                          errors.map { |e| e[msg_field] }.join(', ')].join(' ')
        end
      end
    end
  end
end
